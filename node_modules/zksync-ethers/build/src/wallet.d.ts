import { EIP712Signer } from "./signer";
import { Provider } from "./provider";
import { ethers, ProgressCallback } from "ethers";
import { TransactionLike, TransactionRequest, TransactionResponse } from "./types";
declare const Wallet_base: {
    new (...args: any[]): {
        _providerL2(): Provider;
        _signerL2(): ethers.Signer;
        getBalance(token?: string | undefined, blockTag?: ethers.BlockTag): Promise<bigint>;
        getAllBalances(): Promise<import("./types").BalancesMap>;
        getDeploymentNonce(): Promise<bigint>;
        getL2BridgeContracts(): Promise<{
            erc20: import("../typechain").IL2Bridge;
            weth: import("../typechain").IL2Bridge;
        }>;
        _fillCustomData(data: import("./types").Eip712Meta): import("./types").Eip712Meta;
        withdraw(transaction: {
            token: string;
            amount: ethers.BigNumberish;
            to?: string | undefined;
            bridgeAddress?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<TransactionResponse>;
        transfer(transaction: {
            to: string;
            amount: ethers.BigNumberish;
            token?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<TransactionResponse>;
        sendTransaction(tx: ethers.TransactionRequest): Promise<ethers.TransactionResponse>;
        getAddress(): Promise<string>;
    };
} & {
    new (...args: any[]): {
        _providerL2(): Provider;
        _providerL1(): ethers.Provider;
        _signerL1(): ethers.Signer;
        getMainContract(): Promise<import("../typechain").IZkSync>;
        getL1BridgeContracts(): Promise<{
            erc20: import("../typechain").IL1Bridge;
            weth: import("../typechain").IL1Bridge;
        }>;
        getBalanceL1(token?: string | undefined, blockTag?: ethers.BlockTag | undefined): Promise<bigint>;
        getAllowanceL1(token: string, bridgeAddress?: string | undefined, blockTag?: ethers.BlockTag | undefined): Promise<bigint>;
        l2TokenAddress(token: string): Promise<string>;
        approveERC20(token: string, amount: ethers.BigNumberish, overrides?: (ethers.Overrides & {
            bridgeAddress?: string | undefined;
        }) | undefined): Promise<ethers.TransactionResponse>;
        getBaseCost(params: {
            gasLimit: ethers.BigNumberish;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            gasPrice?: ethers.BigNumberish | undefined;
        }): Promise<bigint>;
        deposit(transaction: {
            token: string;
            amount: ethers.BigNumberish;
            to?: string | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            bridgeAddress?: string | undefined;
            approveERC20?: boolean | undefined;
            l2GasLimit?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
            approveOverrides?: ethers.Overrides | undefined;
            customBridgeData?: ethers.BytesLike | undefined;
        }): Promise<import("./types").PriorityOpResponse>;
        estimateGasDeposit(transaction: {
            token: string;
            amount: ethers.BigNumberish;
            to?: string | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            bridgeAddress?: string | undefined;
            customBridgeData?: ethers.BytesLike | undefined;
            l2GasLimit?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<bigint>;
        getDepositTx(transaction: {
            token: string;
            amount: ethers.BigNumberish;
            to?: string | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            bridgeAddress?: string | undefined;
            l2GasLimit?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            customBridgeData?: ethers.BytesLike | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<any>;
        getFullRequiredDepositFee(transaction: {
            token: string;
            to?: string | undefined;
            bridgeAddress?: string | undefined;
            customBridgeData?: ethers.BytesLike | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<import("./types").FullDepositFee>;
        _getWithdrawalLog(withdrawalHash: ethers.BytesLike, index?: number): Promise<{
            log: import("./types").Log;
            l1BatchTxId: number | null;
        }>;
        _getWithdrawalL2ToL1Log(withdrawalHash: ethers.BytesLike, index?: number): Promise<{
            l2ToL1LogIndex: number;
            l2ToL1Log: import("./types").L2ToL1Log;
        }>;
        finalizeWithdrawalParams(withdrawalHash: ethers.BytesLike, index?: number): Promise<{
            l1BatchNumber: number | null;
            l2MessageIndex: number;
            l2TxNumberInBlock: number | null;
            message: any;
            sender: string;
            proof: string[];
        }>;
        finalizeWithdrawal(withdrawalHash: ethers.BytesLike, index?: number, overrides?: ethers.Overrides | undefined): Promise<ethers.ContractTransactionResponse>;
        isWithdrawalFinalized(withdrawalHash: ethers.BytesLike, index?: number): Promise<boolean>;
        claimFailedDeposit(depositHash: ethers.BytesLike, overrides?: ethers.Overrides | undefined): Promise<ethers.ContractTransactionResponse>;
        requestExecute(transaction: {
            contractAddress: string;
            calldata: string;
            l2GasLimit: ethers.BigNumberish;
            l2Value?: ethers.BigNumberish | undefined;
            factoryDeps?: ethers.BytesLike[] | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<import("./types").PriorityOpResponse>;
        estimateGasRequestExecute(transaction: {
            contractAddress: string;
            calldata: string;
            l2GasLimit?: ethers.BigNumberish | undefined;
            l2Value?: ethers.BigNumberish | undefined;
            factoryDeps?: ethers.BytesLike[] | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<bigint>;
        getRequestExecuteTx(transaction: {
            contractAddress: string;
            calldata: string;
            l2GasLimit?: ethers.BigNumberish | undefined;
            l2Value?: ethers.BigNumberish | undefined;
            factoryDeps?: ethers.BytesLike[] | undefined;
            operatorTip?: ethers.BigNumberish | undefined;
            gasPerPubdataByte?: ethers.BigNumberish | undefined;
            refundRecipient?: string | undefined;
            overrides?: ethers.Overrides | undefined;
        }): Promise<ethers.TransactionRequest>;
        sendTransaction(tx: ethers.TransactionRequest): Promise<ethers.TransactionResponse>;
        getAddress(): Promise<string>;
    };
} & typeof ethers.Wallet;
export declare class Wallet extends Wallet_base {
    readonly provider: Provider;
    providerL1?: ethers.Provider;
    eip712: EIP712Signer;
    _providerL1(): ethers.Provider;
    _providerL2(): Provider;
    _signerL1(): ethers.Wallet;
    _signerL2(): this;
    ethWallet(): ethers.Wallet;
    connect(provider: Provider): Wallet;
    connectToL1(provider: ethers.Provider): Wallet;
    static fromMnemonic(mnemonic: string, provider?: ethers.Provider): Wallet;
    static fromEncryptedJson(json: string, password: string | Uint8Array, callback?: ProgressCallback): Promise<Wallet>;
    static fromEncryptedJsonSync(json: string, password: string | Uint8Array): Wallet;
    constructor(privateKey: string | ethers.SigningKey, providerL2?: Provider, providerL1?: ethers.Provider);
    populateTransaction(transaction: TransactionRequest): Promise<TransactionLike>;
    signTransaction(transaction: TransactionRequest): Promise<string>;
    sendTransaction(tx: TransactionRequest): Promise<TransactionResponse>;
}
export {};

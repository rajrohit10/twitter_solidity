"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wallet = void 0;
const signer_1 = require("./signer");
const utils_1 = require("./utils");
const ethers_1 = require("ethers");
const adapters_1 = require("./adapters");
class Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {
    _providerL1() {
        if (this.providerL1 == null) {
            throw new Error("L1 provider missing: use `connectToL1` to specify");
        }
        return this.providerL1;
    }
    _providerL2() {
        return this.provider;
    }
    _signerL1() {
        return this.ethWallet();
    }
    _signerL2() {
        return this;
    }
    ethWallet() {
        return new ethers_1.ethers.Wallet(this.signingKey, this._providerL1());
    }
    connect(provider) {
        return new Wallet(this.signingKey, provider, this.providerL1);
    }
    connectToL1(provider) {
        return new Wallet(this.signingKey, this.provider, provider);
    }
    static fromMnemonic(mnemonic, provider) {
        const wallet = super.fromPhrase(mnemonic, provider);
        return new Wallet(wallet.signingKey, undefined, wallet.provider);
    }
    static async fromEncryptedJson(json, password, callback) {
        const wallet = await super.fromEncryptedJson(json, password, callback);
        return new Wallet(wallet.signingKey);
    }
    static fromEncryptedJsonSync(json, password) {
        const wallet = super.fromEncryptedJsonSync(json, password);
        return new Wallet(wallet.signingKey);
    }
    constructor(privateKey, providerL2, providerL1) {
        super(privateKey, providerL2);
        // @ts-ignore
        if (this.provider != null) {
            const network = this.provider.getNetwork();
            // @ts-ignore
            this.eip712 = new signer_1.EIP712Signer(this, network.then((n) => Number(n.chainId)));
        }
        this.providerL1 = providerL1;
    }
    async populateTransaction(transaction) {
        if (transaction.type == null && transaction.customData == null) {
            // use legacy txs by default
            transaction.type = 0;
        }
        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {
            return (await super.populateTransaction(transaction));
        }
        transaction.type = utils_1.EIP712_TX_TYPE;
        const populated = (await super.populateTransaction(transaction));
        populated.type = utils_1.EIP712_TX_TYPE;
        populated.value ?? (populated.value = 0);
        populated.data ?? (populated.data = "0x");
        populated.customData = this._fillCustomData(transaction.customData ?? {});
        populated.gasPrice = await this.provider.getGasPrice();
        return populated;
    }
    async signTransaction(transaction) {
        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {
            if (transaction.type == 2 && transaction.maxFeePerGas == null) {
                transaction.maxFeePerGas = await this.provider.getGasPrice();
            }
            return await super.signTransaction(transaction);
        }
        else {
            transaction.from ?? (transaction.from = this.address);
            let from = await ethers_1.ethers.resolveAddress(transaction.from);
            if (from.toLowerCase() != this.address.toLowerCase()) {
                throw new Error("Transaction `from` address mismatch");
            }
            transaction.customData ?? (transaction.customData = {});
            transaction.customData.customSignature = await this.eip712.sign(transaction);
            const populated = await this.populateTransaction(transaction);
            return (0, utils_1.serializeEip712)(populated);
        }
    }
    async sendTransaction(tx) {
        const populatedTx = await this.populateTransaction(tx);
        return await this.provider.broadcastTransaction(await this.signTransaction(populatedTx));
    }
}
exports.Wallet = Wallet;

import { type ContractRunner } from "ethers";
import type { IAllowList, IAllowListInterface } from "../IAllowList";
export declare class IAllowList__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "enum IAllowList.AccessMode";
            readonly name: "previousMode";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "enum IAllowList.AccessMode";
            readonly name: "newMode";
            readonly type: "uint8";
        }];
        readonly name: "UpdateAccessMode";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes4";
            readonly name: "functionSig";
            readonly type: "bytes4";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly name: "UpdateCallPermission";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l1Token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "depositLimitation";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "depositCap";
            readonly type: "uint256";
        }];
        readonly name: "UpdateDepositLimit";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_caller";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "_functionSig";
            readonly type: "bytes4";
        }];
        readonly name: "canCall";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }];
        readonly name: "getAccessMode";
        readonly outputs: readonly [{
            readonly internalType: "enum IAllowList.AccessMode";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_l1Token";
            readonly type: "address";
        }];
        readonly name: "getTokenDepositLimitData";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "depositLimitation";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "depositCap";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IAllowList.Deposit";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_caller";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "_functionSig";
            readonly type: "bytes4";
        }];
        readonly name: "hasSpecialAccessToCall";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "enum IAllowList.AccessMode";
            readonly name: "_accessMode";
            readonly type: "uint8";
        }];
        readonly name: "setAccessMode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "enum IAllowList.AccessMode[]";
            readonly name: "_accessMode";
            readonly type: "uint8[]";
        }];
        readonly name: "setBatchAccessMode";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_callers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "_functionSigs";
            readonly type: "bytes4[]";
        }, {
            readonly internalType: "bool[]";
            readonly name: "_enables";
            readonly type: "bool[]";
        }];
        readonly name: "setBatchPermissionToCall";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_l1Token";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_depositLimitation";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "_depositCap";
            readonly type: "uint256";
        }];
        readonly name: "setDepositLimit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_caller";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "_functionSig";
            readonly type: "bytes4";
        }, {
            readonly internalType: "bool";
            readonly name: "_enable";
            readonly type: "bool";
        }];
        readonly name: "setPermissionToCall";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IAllowListInterface;
    static connect(address: string, runner?: ContractRunner | null): IAllowList;
}

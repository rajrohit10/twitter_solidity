/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Profile {
  export type UserProfileStruct = { displayName: string; bio: string };

  export type UserProfileStructOutput = [displayName: string, bio: string] & {
    displayName: string;
    bio: string;
  };
}

export interface ProfileInterface extends Interface {
  getFunction(
    nameOrSignature: "getProfile" | "profiles" | "setProfile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;
}

export interface Profile extends BaseContract {
  connect(runner?: ContractRunner | null): Profile;
  waitForDeployment(): Promise<this>;

  interface: ProfileInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProfile: TypedContractMethod<
    [_user: AddressLike],
    [Profile.UserProfileStructOutput],
    "view"
  >;

  profiles: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { displayName: string; bio: string }],
    "view"
  >;

  setProfile: TypedContractMethod<
    [_displayName: string, _bio: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [_user: AddressLike],
    [Profile.UserProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "profiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { displayName: string; bio: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setProfile"
  ): TypedContractMethod<
    [_displayName: string, _bio: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
